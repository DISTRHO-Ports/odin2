trigger:
- master
- devel
- cmake_azure
  
jobs:

- job: Build
  strategy:
    matrix:
      Windows:
        imageName: 'windows-2019'
        isWindows: True
      Mac:
        imageName: 'macOS-1015'
        isMac: True
      Linux:
        imageName: 'ubuntu-18.04'
        isLinux: True

  pool:
    vmImage: '$(imageName)'

  steps:

  - bash: |
      git submodule init
      git submodule update
    displayName: "Git Submodules"

#! ██     ██ ██ ███    ██ ██████   ██████  ██     ██ ███████ 
#! ██     ██ ██ ████   ██ ██   ██ ██    ██ ██     ██ ██      
#! ██  █  ██ ██ ██ ██  ██ ██   ██ ██    ██ ██  █  ██ ███████ 
#! ██ ███ ██ ██ ██  ██ ██ ██   ██ ██    ██ ██ ███ ██      ██ 
#!  ███ ███  ██ ██   ████ ██████   ██████   ███ ███  ███████

  - bash: |
      nuget install innosetup
    displayName: 'Windows: Install Prerequisites'
    condition: variables.isWindows

  - task: MSBuild@1
    inputs:
      solution: "Builds/VisualStudio2019/Odin2.sln"
      platform: "x64"
      configuration: "release"
    displayName: "Windows: Build Odin MSBuild"
    condition: variables.isWindows

  - bash: |
      iscc installers/windows/win_installer.iss
      cd installers/windows/Output
      echo ""
      echo "Results"
      [[ $(find Odin2.exe -type f -size +30000000c 2>/dev/null) ]] && echo "Windows installer built successfully" || exit 1

      export PROJ_VERSION="$(../../../../JUCE/extras/Projucer/Builds/VisualStudio2019/x64/Release/App/Projucer.exe --get-version ../../../Odin.jucer)"
      echo "Odin Project Version: $PROJ_VERSION"
      mv "Odin2.exe" "Odin${PROJ_VERSION}WinInstaller.exe"
      ls -l


    displayName: 'Windows: Build Installer'
    condition: variables.isWindows

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: 'installers/windows/Output'
    displayName: 'Windows: Publish Installer'
    condition: variables.isWindows

#! ███    ███  █████   ██████ 
#! ████  ████ ██   ██ ██      
#! ██ ████ ██ ███████ ██      
#! ██  ██  ██ ██   ██ ██      
#! ██      ██ ██   ██  ██████

  - script: |
      echo ""
      echo "==============================="
      echo "====== INSTALL PACKAGES ======="
      echo "==============================="
      echo ""
      function installdmg {
        set -x
        tempd=$(mktemp -d)
        curl $1 > $tempd/pkg.dmg
        listing=$(hdiutil attach $tempd/pkg.dmg | grep Volumes)
        volume=$(echo "$listing" | cut -f 3)
        if [ -e "$volume"/*.app ]; then
          cp -rf "$volume"/*.app /Applications
        elif [ -e "$volume"/*.pkg ]; then
          package=$(ls -1 "$volume" | grep .pkg | head -1)
          sudo installer -verbose -pkg "$volume"/"$package" -target /
        fi
        sudo hdiutil detach "$(echo "$listing" | cut -f 1)"
        rm -rf $tempd
        set +x
      }
      installdmg http://s.sudre.free.fr/Software/files/Packages.dmg
      #echo "Download and install Packages packaging tool"
      #curl http://s.sudre.free.fr/Software/files/Packages.dmg -o Packages.dmg
      #echo "Install Packages packaging tool"
      ls -l /usr/local/bin | grep packagesbuild

    displayName: 'Mac: Install Prerequisites'
    condition: variables.isMac

  - task: Xcode@5
    inputs:
      actions: 'build'
      sdk: ''
      configuration: 'Release'
      xcodeVersion: 'default'
      xcWorkspacePath: Builds/MacOSX/Odin2.xcodeproj
    displayName: 'Mac: Build Odin XCode'
    condition: variables.isMac

  - script: |
      echo ""
      echo "==============================="
      echo "======== PACKAGE ODIN ========="
      echo "==============================="
      echo ""
      cd installers/mac
      echo "Adjusting paths in pkgproj to Azure build system"
      cat Odin2MacInstaller.pkgproj | grep ../../..
      echo ""
      sed -i '' 's:../../../Library:../../../../../Library:' Odin2MacInstaller.pkgproj
      sed -i '' 's:../../../odin2:../..:' Odin2MacInstaller.pkgproj
      cat Odin2MacInstaller.pkgproj | grep ../../..

      /usr/local/bin/packagesbuild Odin2MacInstaller.pkgproj
      echo ""
      echo "The final product:"
      ls -lh build
      pwd

      [[ $(find build/Odin2MacInstaller.pkg -type f -size +50000000c 2>/dev/null) ]] && echo "Mac Package Built Successfully" || exit 1

      export PROJ_VERSION="$(../../../JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer --get-version ../../Odin.jucer)"
      echo "Odin Project Version: $PROJ_VERSION"
      mv "build/Odin2MacInstaller.pkg" "build/Odin${PROJ_VERSION}MacInstaller.pkg"

      ls -l build

    displayName: 'Mac: Package Odin'
    condition: variables.isMac

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: 'installers/mac/build'
    displayName: 'Mac: Publish Installer'
    condition: variables.isMac

#! ██      ██ ███    ██ ██    ██ ██   ██ 
#! ██      ██ ████   ██ ██    ██  ██ ██  
#! ██      ██ ██ ██  ██ ██    ██   ███   
#! ██      ██ ██  ██ ██ ██    ██  ██ ██  
#! ███████ ██ ██   ████  ██████  ██   ██

  - script: |
      echo ""
      echo "==============================="
      echo "==== INSTALL STUFF VIA APT ===="
      echo "==============================="
      sudo apt-get update
      sudo apt-get install -y libgtk-3-dev
      sudo apt-get install -y libwebkit2gtk-4.0
      sudo apt-get install -y libwebkit2gtk-4.0-dev
      sudo apt-get install -y libcurl4-openssl-dev
      sudo apt-get install -y alsa
      sudo apt-get install -y alsa-tools
      sudo apt-get install -y libasound2-dev
      sudo apt-get install -y jack
      sudo apt-get install -y libjack-dev
      sudo apt-get install -y libfreetype6-dev
      sudo apt-get install -y libxinerama-dev
      sudo apt-get install -y libxcb-xinerama0
      sudo apt-get install -y libxinerama1
      sudo apt-get install -y x11proto-xinerama-dev
      sudo apt-get install -y libxrandr-dev
      sudo apt-get install -y libgl1-mesa-dev
      sudo apt-get install -y libxcursor-dev 
      sudo apt-get install -y libxcursor1 
      sudo apt-get install -y libxcb-cursor-dev 
      sudo apt-get install -y libxcb-cursor0
      sudo apt-get install -y xvfb
      sudo apt-get install -y lv2-dev 
      sudo apt-get install -y --fix-missing
      apt list --installed
    displayName: 'Linux: Install Prerequisites'
    condition: variables.isLinux

  - script: |
      mkdir build
      cmake -B build -D CMAKE_BUILD_TYPE=Release
      ls -la
    displayName: 'Linux: CMake'
    condition: variables.isLinux

  - script: |
      cmake --build build --config Release
      ls -la
    displayName: "Linux: Build"
    condition: variables.isLinux

  - script: |
      export PROJECT_VERSION=$(cat CMakeLists.txt | grep "VERSION \"" | awk '{print $2}' | tr -d '"')
      echo "Odin Project Version: $PROJECT_VERSION"
      IFS='.' read -ra ADDR <<< "$PROJECT_VERSION"
      export DEBIAN_PROJECT_STRING="${ADDR[0]}.${ADDR[1]}-${ADDR[2]}"
      echo "Debian package String: $DEBIAN_PROJECT_STRING"
      cd installers/linux
      ./create_installers.sh $DEBIAN_PROJECT_STRING
      echo ""
      echo "Packed builds:"
      echo ""
      ls -lh | grep Odin

      export $DEB_NAME="Odin_$DEBIAN_PROJECT_STRING.deb"
      echo "Debian name should be: $DEB_NAME"

      echo ""
      echo "RESULTS:"
      echo ""
      [[ $(find Odin2_linux_x64.zip -type f -size +50000000c 2>/dev/null) ]] && echo "Generic Zip Built sucessfully!" || exit 1
      [[ $(find $DEB_NAME -type f -size +50000000c 2>/dev/null) ]] && echo "Debian package built successfully!" || exit 1

      echo "Move installers to separate dir"
      mkdir build
      mv Odin* build/

      echo "Rename Linux Zip"
      export PROJ_VERSION="$(../../../JUCE/extras/Projucer/Builds/LinuxMakefile/build/Projucer --get-version ../../Odin.jucer)"
      echo "Odin Project Version: $PROJ_VERSION"
      mv "build/Odin2_linux_x64.zip" "build/Odin${PROJ_VERSION}Linux.zip"
      
    displayName: 'Linux: Build Odin2 Packages'
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: 'installers/linux/build'
    displayName: 'Linux: Publish Installer'
    condition: variables.isLinux

#!==============================================================================
#!==============================================================================
#!==============================================================================
#!==============================================================================
#!==============================================================================
#!==============================================================================
#!==============================================================================


- job: NightlyDevelUpdate
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/devel'))

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/nightly-devel-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     ls $(Build.ArtifactStagingDirectory)
     
    displayName: Create Release Notes


  - task: GitHubRelease@0
    displayName: "Create New Github Release"
    inputs:
      gitHubConnection: TheWaveWardenOdin2AzureConnection
      repositoryName: TheWaveWarden/odin2
      action: 'edit'
      tag: NightlyDevel
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      assetUploadMode: 'delete'
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.*





