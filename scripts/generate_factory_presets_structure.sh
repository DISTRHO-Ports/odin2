#!/bin/bash

# This file generates cpp code that tells the patch browser the tree structure of how factory presets are named

CPP_FILE_STRUCTURE="../Source/gui/FactoryPresetNames.h"
CPP_FILE_STRUCTURE_ABS=$(realpath "$CPP_FILE_STRUCTURE")

CPP_FILE_BINARY_MAP="../Source/gui/FactoryPresetBinaryMapping.h"
CPP_FILE_BINARY_ABS=$(realpath "$CPP_FILE_BINARY_MAP")

FP_DIR="../Soundbanks/Factory Presets"
echo $FP_DIR_ABS

echo "// This file is automatically generated by odin2/scripts/generate_factory_presets_structure.sh" > $CPP_FILE_STRUCTURE_ABS
echo "// If you make changes to the FactoryPresets, you need to run said script again and regerate this file!" >> $CPP_FILE_STRUCTURE_ABS
echo "" >> $CPP_FILE_STRUCTURE_ABS

echo "// This file is automatically generated by odin2/scripts/generate_factory_presets_structure.sh" > $CPP_FILE_BINARY_ABS
echo "// If you make changes to the FactoryPresets, you need to run said script again and regerate this file!" >> $CPP_FILE_BINARY_ABS
echo "" >> $CPP_FILE_BINARY_ABS

cd "$FP_DIR"
pwd

#generate first vector containing the folder names
echo "std::map<std::string, std::vector<std::string>> m_factory_preset_cat_and_names = {" >> $CPP_FILE_STRUCTURE_ABS

echo "constexpr unsigned int hash(const char* str, int h = 0)">> $CPP_FILE_BINARY_ABS
echo "{">> $CPP_FILE_BINARY_ABS
echo "    return !str[h] ? 5381 : (hash(str, h+1) * 33) ^ str[h];">> $CPP_FILE_BINARY_ABS
echo "}">> $CPP_FILE_BINARY_ABS
echo "">> $CPP_FILE_BINARY_ABS
echo "std::pair<char*, int> getFactoryPresetBinaryData(const std::std::string& p_preset) {" >> $CPP_FILE_BINARY_ABS
echo "    switch(hash(p_preset)) {" >> $CPP_FILE_BINARY_ABS



for cat in *; do
    CATEGORY=$(realpath --relative-to=. "$cat")
    echo "Category folder: $CATEGORY"
    echo "    { \"$CATEGORY\", " >> $CPP_FILE_STRUCTURE_ABS
    echo "    {" >> $CPP_FILE_STRUCTURE_ABS
    cd "$cat"
    # write individual preset names:
    for preset in *; do
        echo "        \"$preset\", " >> $CPP_FILE_STRUCTURE_ABS

        #modify the name to be compatible with the cpp conform namin in BinaryData.h:
        preset_cpp=$preset
        echo $preset_cpp
        #replace spaces by underscore
        preset_cpp=${preset_cpp// /_}
        echo $preset_cpp
        #replace points by underscore
        preset_cpp=${preset_cpp//./_}
        echo $preset_cpp
        #remove characters ".()[]-"
        preset_cpp=${preset_cpp//[}
        preset_cpp=${preset_cpp//]}
        preset_cpp=${preset_cpp//(}
        preset_cpp=${preset_cpp//)}
        preset_cpp=${preset_cpp//-}
        #if first char is a number, put an underscore in front of it
        if [[ $preset_cpp =~ ^[0-9] ]];
        then
            preset_cpp="_$preset_cpp"
        fi
        echo $preset_cpp
        echo "    case hash(\"$preset\"):" >> $CPP_FILE_BINARY_ABS
        echo "        return std::make_pair(BinaryData::$preset_cpp, BinaryData::${preset_cpp}size);" >> $CPP_FILE_BINARY_ABS
        

    done
    cd ..
    echo "    } }," >> $CPP_FILE_STRUCTURE_ABS
    echo ""
done
echo "};" >> $CPP_FILE_STRUCTURE_ABS
echo "" >> $CPP_FILE_STRUCTURE_ABS

echo "    default:" >> $CPP_FILE_BINARY_ABS
echo "        DBG(\"ERROR: Illegal Lookup in FactoryPresetBinaryMapping.h PresetName: \" + p_preset):" >> $CPP_FILE_BINARY_ABS
echo "        return std::make_pair(nullptr, 0)" >> $CPP_FILE_BINARY_ABS
echo "    }" >> $CPP_FILE_BINARY_ABS
echo "}" >> $CPP_FILE_BINARY_ABS
echo "" >> $CPP_FILE_BINARY_ABS

#generate all the vectors containing the preset names for their respective_folders

